<script defer src="data:text/javascript;base64,"use strict";const chacha20_poly1305=(()=>{const KEY_LENGTH=32;const NONCE_LENGTH=12;const TAG_LENGTH=16;const INVALID_TAG_ERROR_MESSAGE='The received tag and the calculated tag are not the same. The data is invalid.';const chacha20=(()=>{const STATE_SIZE=64;const ROUNDS=20;const H=[0x61707865,0x3320646e,0x79622d32,0x6b206574];const quarter_round=(state,a,b,c,d)=>{state[a]+=state[b];state[d]^=state[a];state[d]=rotl(state[d],16);state[c]+=state[d];state[b]^=state[c];state[b]=rotl(state[b],12);state[a]+=state[b];state[d]^=state[a];state[d]=rotl(state[d],8);state[c]+=state[d];state[b]^=state[c];state[b]=rotl(state[b],7);return state;};const inner_block=state=>{state=quarter_round(state,0,4,8,12);state=quarter_round(state,1,5,9,13);state=quarter_round(state,2,6,10,14);state=quarter_round(state,3,7,11,15);state=quarter_round(state,0,5,10,15);state=quarter_round(state,1,6,11,12);state=quarter_round(state,2,7,8,13);state=quarter_round(state,3,4,9,14);return state;};const serialize=state=>{let retval=[];for(let i=0;i<STATE_SIZE/4;i++){retval[i*4]=state[i]&0xff;retval[i*4+1]=(state[i]>>>8)&0xff;retval[i*4+2]=(state[i]>>>16)&0xff;retval[i*4+3]=(state[i]>>>24)&0xff;}return retval;};const init=(key,counter,nonce)=>{return new Uint32Array([H[0],H[1],H[2],H[3],to_uint_32(key.slice(0,4)),to_uint_32(key.slice(4,8)),to_uint_32(key.slice(8,12)),to_uint_32(key.slice(12,16)),to_uint_32(key.slice(16,20)),to_uint_32(key.slice(20,24)),to_uint_32(key.slice(24,28)),to_uint_32(key.slice(28,32)),counter,to_uint_32(nonce.slice(0,4)),to_uint_32(nonce.slice(4,8)),to_uint_32(nonce.slice(8,12))]);};const rotl=(n,i)=>(n<<i)|(n>>>(32-i));const to_uint_32=bytes=>bytes[3]<<24|bytes[2]<<16|bytes[1]<<8|bytes[0];return{block(key,counter,nonce){const original=init(key,counter,nonce);let state=new Uint32Array(original);for(let i=0;i<ROUNDS/2;i++)state=inner_block(state);for(let i=0;i<STATE_SIZE/4;i++)state[i]+=original[i];return serialize(state);},encrypt(key,counter,nonce,plaintext){let ciphertext=[];for(let i=0;i<plaintext.length;i+=STATE_SIZE){const stream=this.block(key,counter+i/STATE_SIZE,nonce);plaintext.slice(i,i+STATE_SIZE).map((x,j)=>ciphertext.push(x^stream[j]));}return ciphertext;}}})();const poly1305=(()=>{const clamp=r=>{r[3]&=15;r[7]&=15;r[11]&=15;r[15]&=15;r[4]&=252;r[8]&=252;r[12]&=252;return r;};const le_bytes_to_num=n=>{let hex='';for(let i=n.length-1;i>=0;i--){hex+=n[i].toString(16).padStart(2,'0');}return BigInt('0x'+hex);};const num_to_16_le_bytes=a=>{let hex=a.toString(16).padStart(32,'0');let retval=[];for(let i=hex.length-2;i>=0;i-=2){retval[retval.length]=parseInt(hex.substring(i,i+2),16);if(retval.length===TAG_LENGTH)break;}return retval;};return{key_gen(key,nonce){return chacha20.block(key,0,nonce).slice(0,KEY_LENGTH);},mac(msg,key){let r=le_bytes_to_num(clamp(key.slice(0,16)));let s=le_bytes_to_num(key.slice(16,32));let a=0n;const p=BigInt('0x3fffffffffffffffffffffffffffffffb');for(let i=0;i<msg.length;i+=16){let n=le_bytes_to_num(msg.slice(i,i+16).concat(1));a+=n;a=(r*a)%p;}a+=s;return num_to_16_le_bytes(a);}}})();const parameters=(()=>{const pad_bytes=(bytes,length,value)=>{for(let i=bytes.length;i<length;i++){bytes.push(value);}return bytes;};const clamp_bytes=(bytes,length)=>{if(bytes.length===length)return bytes;if(bytes.length<length)return pad_bytes(bytes,length,0);return bytes.slice(0,length);};const pad_key=key=>{return clamp_bytes(key,KEY_LENGTH);};const pad_nonce=nonce=>{return clamp_bytes(nonce,NONCE_LENGTH);};return{get_parameters(key,data,nonce=[],aad=[],tag=[]){return{key:pad_key(conversion.to_byte(key)),data:conversion.to_byte(data),nonce:pad_nonce(conversion.to_byte(nonce)),aad:conversion.to_byte(aad),tag:conversion.to_hex(tag)}}}})();const combined=(()=>{const pad_16_bytes=arr=>{let to_pad=16-arr.length%16;if(to_pad===16)to_pad=0;let retval=arr.slice();for(let i=0;i<to_pad;i++){retval[retval.length]=0;}return retval;};const num_to_8_le_bytes=n=>{let hex=n.toString(16).padStart(16,'0');let retval=[];for(let i=hex.length-2;i>=0;i-=2){retval[retval.length]=parseInt(hex.substring(i,i+2),16);}return retval;};return{encrypt(key,plaintext,nonce,aad){const params=parameters.get_parameters(key,plaintext,nonce,aad);const one_time_key=primitive.poly1305.key_gen(params.key,params.nonce);const ciphertext=primitive.chacha20.encrypt(params.key,1,params.nonce,params.data);const mac_data=pad_16_bytes(params.aad).concat(pad_16_bytes(ciphertext)).concat(num_to_8_le_bytes(params.aad.length)).concat(num_to_8_le_bytes(ciphertext.length));const tag=primitive.poly1305.mac(mac_data,one_time_key);return params.nonce.concat(tag).concat(ciphertext);},decrypt(key,ciphertext,aad){const params=parameters.get_parameters(key,ciphertext.slice(NONCE_LENGTH+TAG_LENGTH),ciphertext.slice(0,NONCE_LENGTH),aad,ciphertext.slice(NONCE_LENGTH,NONCE_LENGTH+TAG_LENGTH));const one_time_key=primitive.poly1305.key_gen(params.key,params.nonce);const mac_data=pad_16_bytes(params.aad).concat(pad_16_bytes(params.data)).concat(num_to_8_le_bytes(params.aad.length)).concat(num_to_8_le_bytes(params.data.length));const tag=conversion.to_hex(primitive.poly1305.mac(mac_data,one_time_key));if(params.tag===tag){return primitive.chacha20.encrypt(params.key,1,params.nonce,params.data);}else{throw new Error(INVALID_TAG_ERROR_MESSAGE);}}}})();const encrypt=(()=>{return{array(key,plaintext,nonce=utility.generate_nonce(),aad=[]){return combined.encrypt(key,plaintext,nonce,aad);},hex(key,plaintext,nonce=utility.generate_nonce(),aad=[]){return conversion.to_hex(this.array(key,plaintext,nonce,aad));},base64(key,plaintext,nonce=utility.generate_nonce(),aad=[]){return conversion.to_base64(this.array(key,plaintext,nonce,aad));}}})();const decrypt=(()=>{const array=(()=>{return{to_array(key,ciphertext,aad=[]){return combined.decrypt(key,ciphertext,aad);},to_hex(key,ciphertext,aad=[]){return conversion.to_hex(this.to_array(key,ciphertext,aad));},to_base64(key,ciphertext,aad=[]){return conversion.to_base64(this.to_array(key,ciphertext,aad));},to_utf8(key,ciphertext,aad=[]){return conversion.to_utf8(this.to_array(key,ciphertext,aad));}}})();const hex=(()=>{return{to_array(key,ciphertext,aad=[]){return combined.decrypt(key,conversion.from_hex(ciphertext),aad);},to_hex(key,ciphertext,aad=[]){return conversion.to_hex(this.to_array(key,ciphertext,aad));},to_base64(key,ciphertext,aad=[]){return conversion.to_base64(this.to_array(key,ciphertext,aad));},to_utf8(key,ciphertext,aad=[]){return conversion.to_utf8(this.to_array(key,ciphertext,aad));}}})();const base64=(()=>{return{to_array(key,ciphertext,aad=[]){return combined.decrypt(key,conversion.from_base64(ciphertext),aad);},to_hex(key,ciphertext,aad=[]){return conversion.to_hex(this.to_array(key,ciphertext,aad));},to_base64(key,ciphertext,aad=[]){return conversion.to_base64(this.to_array(key,ciphertext,aad));},to_utf8(key,ciphertext,aad=[]){return conversion.to_utf8(this.to_array(key,ciphertext,aad));}}})();return{array:array,hex:hex,base64:base64}})();const conversion=(()=>{return{to_byte(data){const type=Object.prototype.toString.call(data);switch(type){case'[object Array]':return data.slice();case'[object String]':return[].slice.call(new TextEncoder().encode(data));case'[object Uint8Array]':return[].slice.call(data);case'[object ArrayBuffer]':return[].slice.call(new Uint8Array(data));default:throw new Error(`Invalid data type "${type}" provided.`);}},to_hex(arr){return arr.map(x=>x.toString(16).padStart(2,'0')).join('');},to_base64(arr){return btoa(arr.map(x=>String.fromCharCode(x)).join(''));},to_utf8(arr){return new TextDecoder().decode(new Uint8Array(arr).buffer);},from_hex(s){let retval=[];for(let i=0;i<s.length;i+=2)retval.push(parseInt(s.substring(i,i+2),16));return retval;},from_base64(s){return atob(s).split('').map(x=>x.charCodeAt());}}})();const primitive=(()=>{return{chacha20:chacha20,poly1305:poly1305}})();const utility=(()=>{return{generate_nonce(){const timestamp=Date.now().toString(16).padStart(KEY_LENGTH*2,'0');let key=[];for(let i=0;i<timestamp.length;i+=2)key.push(parseInt(timestamp.slice(i,i+2),16));const counter=0xffffffff;const nonce=[0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff];return primitive.chacha20.block(key,counter,nonce).slice(0,NONCE_LENGTH);}}})();return{encrypt:encrypt,decrypt:decrypt,primitive:primitive,}})();"></script>